insertion

#include <iostream>
#include <vector>
using namespace std;
int main(){
    vector<int> elements;
    int n;
    cin>>n;
    int ele;
    for(int i=0; i<n; i++){
        cin>>ele;
        elements.push_back(ele);
    }
    int key, i;
    for(int j=1; j<n; j++){
        key = elements[j];
        i=j-1;
        while(i>=0 && elements[i]>key){
            elements[i+1] = elements[i];
            i--;
        }
        elements[i+1]=key;
    }
    for(int i=0; i<n; i++){
        cout<<elements[i]<<" ";
    }
}


mergesort 
#include <iostream>
#include <vector>
#include <limits.h>
using namespace std;

void merge(vector<int>& elements, int left, int mid, int right) {
    vector<int> lsa, rsa;
    int lsa_n, rsa_n, lsa_idx, rsa_idx, ele_idx;
    lsa_n = mid-left+1;
    rsa_n = right-mid;
    for(int i=0; i<lsa_n; i++){
        lsa.push_back(elements[left+i]);
    }
    for(int i=0; i<rsa_n; i++){
        rsa.push_back(elements[mid+i+1]);
    }
    lsa.push_back(INT_MAX);
    rsa.push_back(INT_MAX);
    lsa_idx=0;
    rsa_idx=0;
    for(ele_idx=left; ele_idx<=right; ele_idx++){
        if(lsa[lsa_idx] < rsa[rsa_idx]){
            elements[ele_idx] = lsa[lsa_idx];
            lsa_idx++;
        }
        else{
            elements[ele_idx] = rsa[rsa_idx];
            rsa_idx++;
        }
    }
}

void mergesort(vector<int> &elements, int left, int right){
    if(left==right)
        return;
    int mid = (left+right)/2;
    mergesort(elements, left, mid);
    mergesort(elements, mid+1, right);
    merge(elements, left, mid, right);
}

int main() {
    vector<int> elements;
    int n;
    cin >> n;
    int ele;
    for (int i = 0; i < n; i++) {
        cin >> ele;
        elements.push_back(ele);
    }

    mergesort(elements, 0, n-1);

    for (int i = 0; i < n; i++) {
        cout << elements[i] << " ";
    }
    
    return 0;
}
////////////////////////////////////////////
#include<iostream>
#include<vector>
#include<ctime>
#include<limits.h>
using namespace std;

void merge(vector<pair<int, int>>& coordinates, int left, int mid, int right) {
    vector<pair<int, int>> left_arr, right_arr;
    int left_ele, right_ele, i, fa_idx, left_idx, right_idx;
    left_ele = mid - left + 1;
    right_ele = right - mid;

    for (i = 0; i < left_ele; i++)
        left_arr.push_back(coordinates[left + i]);
    left_arr.push_back({INT_MAX, INT_MAX});

    for (i = 0; i < right_ele; i++)
        right_arr.push_back(coordinates[mid + 1 + i]);
    right_arr.push_back({INT_MAX, INT_MAX});

    left_idx = 0;
    right_idx = 0;
    for (fa_idx = left; fa_idx <= right; fa_idx++) {
        if (left_arr[left_idx].first < right_arr[right_idx].first) {
            coordinates[fa_idx] = left_arr[left_idx];
            left_idx++;
        }
        else {
            coordinates[fa_idx] = right_arr[right_idx];
            right_idx++;
        }
    }
}

void mergeSort(vector<pair<int, int>>& coordinates, int left, int right) {
    int mid;
    if (left == right) {
        return;
    }
    mid = (left + right) / 2;
    mergeSort(coordinates, left, mid);
    mergeSort(coordinates, mid + 1, right);
    merge(coordinates, left, mid, right);
}

int main() {
    int n, i, x, y;
    vector<pair<int, int>> coordinates;
    cout << "Enter the number of coordinates: ";
    cin >> n;
    srand(time(0));
    for (i = 0; i < n; i++) {
        int x = rand() % n;
        int y = rand() % n;
        coordinates.push_back({x, y});
    }

    clock_t tStart = clock();
    mergeSort(coordinates, 0, n - 1);

    double time = (double)(clock() - tStart) / CLOCKS_PER_SEC;
    cout << "Time: " << time << endl;
    cout << "Coordinates sorted by x coordinates:\n";
    for (i = 0; i < n; i++) {
        cout << coordinates[i].first << " " << coordinates[i].second << "\n";
    }
    return 0;
}


max sum subarray

#include <iostream>
#include <limits.h>
#include <vector>
using namespace std;

int max(vector<int> a, int l, int mid, int h) {
    int sum = 0;
    int lsum = INT_MIN;
    for (int i = mid; i >= l; i--) {
        sum += a[i];
        if (sum > lsum) {
            lsum = sum;
        }
    }
    sum = 0;
    int rsum = INT_MIN;
    for (int i = mid + 1; i <= h; i++) {
        sum += a[i];
        if (sum > rsum) {
            rsum = sum;
        }
    }
    return (lsum + rsum);
}

int max_sum(vector<int> a, int l, int h) {
    if (l == h) {
        return a[l];
    } else {
        int mid = (l + h) / 2;
        int leftsum = max_sum(a, l, mid);
        int rightsum = max_sum(a, mid + 1, h);
        int tot = max(a, l, mid, h);
        return max(max(leftsum, rightsum), tot);
    }
}
int main(){
    int n,ele;
    cin>>n;
    vector<int> a(n);
    for(int i=0;i<n;i++){
        cin>>ele;
        a[i]=ele;
    }
    cout<<max_sum(a,0,n-1);
}
int main() {
    int n, ele;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> ele;
        a[i]=ele;
    }
    
    cout << max_sum(a, 0, n - 1);
    
    return 0;
}


// Recursive matrix multiplication
#include<iostream>
using namespace std;
#include<vector>
#include<limits.h>
int matrix_chain_mul(int i, int j, vector<int> &p)
{
    int min_cost = INT_MAX,k,left_cost,right_cost,total_cost;    
    if(i==j)
        return 0;
    for(k=i;k<j;k++)
    {       
        left_cost = matrix_chain_mul(i,k,p);
        right_cost = matrix_chain_mul(k+1,j,p);
        total_cost = left_cost + right_cost + p[i-1] * p[k] * p[j];
        if(total_cost<min_cost)
        {
            min_cost = total_cost;
            
        }
    }
    return min_cost;
}
int main()
{
    int n,ele,i;
    vector<int> p;
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>ele;
        p.push_back(ele);
    }
    cout<<matrix_chain_mul(1,n-1,p);
}


lcs
// Recursive routine
#include<iostream>
using namespace std;
#include<limits.h>
#include<vector>
int lcs_length(string x, string y, int x_index,int y_index)
{
    
    int m,n,i,j,l1,l2;
    m = x.length();
    n = y.length();
    if((x_index>=m)||(y_index>=n))
        return 0;
    if(x[x_index]==y[y_index])
    {        
        return lcs_length(x,y,x_index+1,y_index+1)+1;
    }
    else
    {
        l1 = lcs_length(x,y,x_index,y_index+1);
        l2 = lcs_length(x,y,x_index+1,y_index);
        return l1>l2? l1: l2;

    }
}
int main()
{
    string x,y;
    int i,j;
    cin>>x>>y;    
    cout<<lcs_length(x,y,0,0);    
}




max product

#include <iostream>
#include <vector>
#include <limits>
using namespace std;

int maxProduct(vector<int>& nums) {
    int n = nums.size();
    int maxProd = nums[0]; 
    int currMax = nums[0]; 
    int currMin = nums[0]; 
    
    for (int i = 1; i < n; i++) {
        if (nums[i] < 0) {
            swap(currMax, currMin); 
        }
        
        currMax = max(nums[i], currMax * nums[i]);
        currMin = min(nums[i], currMin * nums[i]);
        
        maxProd = max(maxProd, currMax);
    }
    
    return maxProd;
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> nums(n);
    int ele;
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin>>ele;
        nums[i]=ele;
    }

    int maxProductSubarray = maxProduct(nums);
    cout << "Maximum product subarray: " << maxProductSubarray << endl;

    return 0;
}


rod cut
#include<iostream>
using namespace std;
#include<vector>
#include<limits.h>
int maximum(int a, int b)
{    
    if(a>b)
        return a;
    return b;
}
int cut_rod(vector<int> p, int length)
{    
    int i;
    int q=INT_MIN;
    if(length==0)
        return 0;
    for(i=1;i<=length;i++)
    {
        q = maximum(q,p[i-1]+cut_rod(p,length-i));
    }
    return q;
}
int main()
{
    vector<int> p;
    int i,n,price,max_profit;
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>price;
        p.push_back(price);
    }
    max_profit = cut_rod(p,n);
    cout<<max_profit;
}


activity selection
#include<iostream>
#include<algorithm>
using namespace std;
   struct Activitiy {
      int start, end;
   };
   bool comp(Activitiy act1, Activitiy act2) {
      return (act1.end < act2.end);
   }
   void maxActivity(Activitiy act[], int n) {
   sort(act, act+n, comp); //sort activities using compare function
   cout << "Selected Activities are: " << endl;
   int i = 0;// first activity as 0 is selected
   cout << "Activity: " << i << " , Start: " <<act[i].start << " End: " << act[i].end <<endl;
   for (int j = 1; j < n; j++) { //for all other activities
      if (act[j].start >= act[i].end) { //when start time is >=end time, print the activity
         cout << "Activity: " << j << " , Start: " <<act[j].start << " End: " << act[j].end <<endl;
         i = j;
      }
   }
}
int main() {
   Activitiy actArr[] = {{5,9},{1,2},{3,4},{0,6},{5,7},{8,9}};
   int n = 6;
   maxActivity(actArr,n);
   return 0;
}

rat in a maze
#include <iostream>
#include <vector>

using namespace std;

void print_board(const vector<vector<int>>& board)
{
    int n = board.size();
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            cout << board[i][j] << " ";
        cout << endl;
    }
    cout << endl;
}

bool is_valid_move(const vector<vector<int>>& maze, int row, int col)
{
    int n = maze.size();
    return (row >= 0 && row < n && col >= 0 && col < n && maze[row][col] == 1);
}

void rat_in_maze(vector<vector<int>>& maze, int n, int row, int col)
{
    static bool soln_found = false;

    if (row == n - 1 && col == n - 1)
    {
        print_board(maze);
        soln_found = true;
        return;
    }

    if (soln_found)
        return;

    if (is_valid_move(maze, row, col))
    {
        maze[row][col] = 2; // Mark the current position as visited

        // Move down
        rat_in_maze(maze, n, row + 1, col);

        // Move right
        rat_in_maze(maze, n, row, col + 1);

        maze[row][col] = 1; // Backtrack - mark the current position as unvisited
    }
}

int main()
{
    int n;
    cin >> n;

    vector<vector<int>> maze(n, vector<int>(n));

    cout << "Enter the maze:\n";
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> maze[i][j];
        }
    }

    rat_in_maze(maze, n, 0, 0);

    return 0;
}


string matching
#include<iostream>
using namespace std;
#include<string>
bool check_pattern(string T, string P, int s)
{
    int m = P.length(),i;
    for(i=0;i<m;i++)
    {
        if(P[i]!=T[s+i+1])
            return false;
    }
    return true;

}
int naive_string_matcher(string T, string P)
{
    int n,m,s,i, a;
    n = T.length();
    m = P.length();

    for(s=-1;s<=n-m-1;s++)
    {
        if (check_pattern(T,P,s))
            a = s+1;
    }
    return a;

}
int main()
{

    string T, P;
    cin>>T>>P;
    cout<<naive_string_matcher(T,P);
}


Graham Scan
#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cmath>
using namespace std;

int orientation(const pair<int, int>& p, const pair<int, int>& q, const pair<int, int>& r) {
    int val = (q.second - p.second) * (r.first - q.first) - (q.first - p.first) * (r.second - q.second);
    if (val == 0)
        return 0;  
    return (val > 0) ? 1 : -1;  
}

int distSq(const pair<int, int>& p1, const pair<int, int>& p2) {
    return (p1.first - p2.first) * (p1.first - p2.first) + (p1.second - p2.second) * (p1.second - p2.second);
}

bool compare(const pair<int, int>& p1, const pair<int, int>& p2) {
    int orientation_val = orientation(make_pair(0, 0), p1, p2);
    if (orientation_val == 0)
        return distSq(make_pair(0, 0), p2) >= distSq(make_pair(0, 0), p1);
    return (orientation_val == 1);
}

void convexHull(vector<pair<int, int>>& points) {
    int n = points.size();
    if (n < 3)
        return;

    int bottom_most = 0;
    for (int i = 1; i < n; i++) {
        if (points[i].second < points[bottom_most].second)
            bottom_most = i;
        if (points[i].second == points[bottom_most].second && points[i].first < points[bottom_most].first)
            bottom_most = i;
    }

    swap(points[0], points[bottom_most]);

    sort(points.begin() + 1, points.end(), compare);

    stack<pair<int, int>> hull;
    hull.push(points[0]);
    hull.push(points[1]);

    for (int i = 2; i < n; i++) {
        pair<int, int> top, next_to_top;
        while (hull.size() >= 2) {
            next_to_top = hull.top();
            hull.pop();
            top = hull.top();
            if (orientation(top, next_to_top, points[i]) != -1)
                break;
        }
        hull.push(next_to_top);
        hull.push(points[i]);
    }

    while (!hull.empty()) {
        pair<int, int> p = hull.top();
        cout << "(" << p.first << ", " << p.second << ")" << endl;
        hull.pop();
    }
}

int main() {
    int n;
    cout << "Enter the number of points: ";
    cin >> n;

    vector<pair<int, int>> points(n);
    cout << "Enter the x and y coordinates of each point:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> points[i].first >> points[i].second;
    }

    convexHull(points);

    return 0;
}




Bellman Ford
#include <iostream>
#include <vector>
#include <climits>

using namespace std;

// A utility function used to print the solution
void printArr(const vector<int>& dist)
{
    cout << "Vertex Distance from Source\n";
    for (int i = 0; i < dist.size(); ++i)
        cout << i << "\t\t" << dist[i] << '\n';
}

// The main function that finds shortest distances from src
// to all other vertices using Bellman-Ford algorithm. The
// function also detects negative weight cycle
void BellmanFord(vector<vector<int>>& graph, int src)
{
    int V = graph.size();
    vector<int> dist(V, INT_MAX);
    dist[src] = 0;

    // Relax all edges V-1 times
    for (int i = 1; i <= V - 1; ++i)
    {
        for (int u = 0; u < V; ++u)
        {
            for (int v = 0; v < V; ++v)
            {
                if (graph[u][v] != 0 && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                    dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Check for negative-weight cycles
    for (int u = 0; u < V; ++u)
    {
        for (int v = 0; v < V; ++v)
        {
            if (graph[u][v] != 0 && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
            {
                cout << "Graph contains negative weight cycle\n";
                return;
            }
        }
    }

    printArr(dist);
}

int main()
{
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<vector<int>> graph(V, vector<int>(V, 0));

    cout << "Enter the source, destination, and weight for each edge:\n";
    for (int i = 0; i < E; ++i)
    {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        graph[src][dest] = weight;
    }

    int src;
    cout << "Enter the source vertex: ";
    cin >> src;

    BellmanFord(graph, src);

    return 0;
}


`
Floyd Warsahll
#include <iostream>
#include <vector>
#include <climits>

using namespace std;

void printSolution(const vector<vector<int>>& dist, int V);

void floydWarshall(vector<vector<int>>& dist, int V)
{
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX && dist[i][j] > dist[i][k] + dist[k][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }

    printSolution(dist, V);
}

void printSolution(const vector<vector<int>>& dist, int V)
{
    cout << "The following matrix shows the shortest distances between every pair of vertices:\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INT_MAX)
                cout << "INF ";
            else
                cout << dist[i][j] << " ";
        }
        cout << endl;
    }
}

int main()
{
    int V;
    cout << "Enter the number of vertices: ";
    cin >> V;

    vector<vector<int>> dist(V, vector<int>(V));

    cout << "Enter the graph matrix (INF for no edge):\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            string weight;
            cin >> weight;
            if (weight == "INF")
                dist[i][j] = INT_MAX;
            else
                dist[i][j] = stoi(weight);
        }
    }

    floydWarshall(dist, V);

    return 0;
}


